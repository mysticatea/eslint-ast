// ========================================================================== //
// DON'T EDIT THIS FILE DIRECTLY!                                             //
// This file is automatically generated by the 'scripts/update-ast-files.ts'. //
// ========================================================================== //
/**
 * @fileoverview The AST types for ES5.
 */
import * as ast from "./lib/ast"
import {
    Comment,
    Definition as ES5,
    IndexRange,
    LineColumnRange,
    LineColumn,
    Token,
} from "./es5-definition"

export { Comment, IndexRange, LineColumnRange, LineColumn, Token }

/** The map-like object that has all nodes and aliases. */
export type AST = ast.AST<ES5>

/** The namespace that has all nodes and aliases. */
export namespace AST {
    /** The union type for all nodes. */
    export type Node = AST["Node"]
    /** The union type for the `AssignmentExpression` alias. */
    export type AssignmentExpression = AST["AssignmentExpression"]
    /** The union type for the `AssignmentTarget` alias. */
    export type AssignmentTarget = AST["AssignmentTarget"]
    /** The union type for the `BindingTarget` alias. */
    export type BindingTarget = AST["BindingTarget"]
    /** The union type for the `Declaration` alias. */
    export type Declaration = AST["Declaration"]
    /** The union type for the `Expression` alias. */
    export type Expression = AST["Expression"]
    /** The union type for the `Function` alias. */
    export type Function = AST["Function"]
    /** The union type for the `FunctionDeclaration` alias. */
    export type FunctionDeclaration = AST["FunctionDeclaration"]
    /** The union type for the `Literal` alias. */
    export type Literal = AST["Literal"]
    /** The union type for the `LogicalExpression` alias. */
    export type LogicalExpression = AST["LogicalExpression"]
    /** The union type for the `MemberExpression` alias. */
    export type MemberExpression = AST["MemberExpression"]
    /** The union type for the `ObjectProperty` alias. */
    export type ObjectProperty = AST["ObjectProperty"]
    /** The union type for the `Program` alias. */
    export type Program = AST["Program"]
    /** The union type for the `Property` alias. */
    export type Property = AST["Property"]
    /** The union type for the `SimpleAssignmentTarget` alias. */
    export type SimpleAssignmentTarget = AST["SimpleAssignmentTarget"]
    /** The union type for the `Statement` alias. */
    export type Statement = AST["Statement"]
    /** The union type for the `StaticPropertyKey` alias. */
    export type StaticPropertyKey = AST["StaticPropertyKey"]
    /** The type for the `AccessorProperty` node. */
    export type AccessorProperty = AST["AccessorProperty"]
    /** The type for the `ArrayExpression` node. */
    export type ArrayExpression = AST["ArrayExpression"]
    /** The type for the `BinaryExpression` node. */
    export type BinaryExpression = AST["BinaryExpression"]
    /** The type for the `BlockStatement` node. */
    export type BlockStatement = AST["BlockStatement"]
    /** The type for the `BooleanLiteral` node. */
    export type BooleanLiteral = AST["BooleanLiteral"]
    /** The type for the `BreakStatement` node. */
    export type BreakStatement = AST["BreakStatement"]
    /** The type for the `CallExpression` node. */
    export type CallExpression = AST["CallExpression"]
    /** The type for the `CatchClause` node. */
    export type CatchClause = AST["CatchClause"]
    /** The type for the `CompoundAssignmentExpression` node. */
    export type CompoundAssignmentExpression = AST["CompoundAssignmentExpression"]
    /** The type for the `ComputedMemberExpression` node. */
    export type ComputedMemberExpression = AST["ComputedMemberExpression"]
    /** The type for the `ConditionalExpression` node. */
    export type ConditionalExpression = AST["ConditionalExpression"]
    /** The type for the `ContinueStatement` node. */
    export type ContinueStatement = AST["ContinueStatement"]
    /** The type for the `DebuggerStatement` node. */
    export type DebuggerStatement = AST["DebuggerStatement"]
    /** The type for the `DoWhileStatement` node. */
    export type DoWhileStatement = AST["DoWhileStatement"]
    /** The type for the `EmptyStatement` node. */
    export type EmptyStatement = AST["EmptyStatement"]
    /** The type for the `ExpressionStatement` node. */
    export type ExpressionStatement = AST["ExpressionStatement"]
    /** The type for the `ForInStatement` node. */
    export type ForInStatement = AST["ForInStatement"]
    /** The type for the `ForStatement` node. */
    export type ForStatement = AST["ForStatement"]
    /** The type for the `FunctionExpression` node. */
    export type FunctionExpression = AST["FunctionExpression"]
    /** The type for the `Identifier` node. */
    export type Identifier = AST["Identifier"]
    /** The type for the `IfStatement` node. */
    export type IfStatement = AST["IfStatement"]
    /** The type for the `LabeledStatement` node. */
    export type LabeledStatement = AST["LabeledStatement"]
    /** The type for the `NewExpression` node. */
    export type NewExpression = AST["NewExpression"]
    /** The type for the `NullLiteral` node. */
    export type NullLiteral = AST["NullLiteral"]
    /** The type for the `NumberLiteral` node. */
    export type NumberLiteral = AST["NumberLiteral"]
    /** The type for the `ObjectExpression` node. */
    export type ObjectExpression = AST["ObjectExpression"]
    /** The type for the `PlainAssignmentExpression` node. */
    export type PlainAssignmentExpression = AST["PlainAssignmentExpression"]
    /** The type for the `PlainFunctionDeclaration` node. */
    export type PlainFunctionDeclaration = AST["PlainFunctionDeclaration"]
    /** The type for the `PlainLogicalExpression` node. */
    export type PlainLogicalExpression = AST["PlainLogicalExpression"]
    /** The type for the `PlainMemberExpression` node. */
    export type PlainMemberExpression = AST["PlainMemberExpression"]
    /** The type for the `PlainProperty` node. */
    export type PlainProperty = AST["PlainProperty"]
    /** The type for the `RegExpLiteral` node. */
    export type RegExpLiteral = AST["RegExpLiteral"]
    /** The type for the `ReturnStatement` node. */
    export type ReturnStatement = AST["ReturnStatement"]
    /** The type for the `ScriptProgram` node. */
    export type ScriptProgram = AST["ScriptProgram"]
    /** The type for the `SequenceExpression` node. */
    export type SequenceExpression = AST["SequenceExpression"]
    /** The type for the `StringLiteral` node. */
    export type StringLiteral = AST["StringLiteral"]
    /** The type for the `SwitchCase` node. */
    export type SwitchCase = AST["SwitchCase"]
    /** The type for the `SwitchStatement` node. */
    export type SwitchStatement = AST["SwitchStatement"]
    /** The type for the `ThisExpression` node. */
    export type ThisExpression = AST["ThisExpression"]
    /** The type for the `ThrowStatement` node. */
    export type ThrowStatement = AST["ThrowStatement"]
    /** The type for the `TryStatement` node. */
    export type TryStatement = AST["TryStatement"]
    /** The type for the `UnaryExpression` node. */
    export type UnaryExpression = AST["UnaryExpression"]
    /** The type for the `UpdateExpression` node. */
    export type UpdateExpression = AST["UpdateExpression"]
    /** The type for the `VariableDeclaration` node. */
    export type VariableDeclaration = AST["VariableDeclaration"]
    /** The type for the `VariableDeclarator` node. */
    export type VariableDeclarator = AST["VariableDeclarator"]
    /** The type for the `WhileStatement` node. */
    export type WhileStatement = AST["WhileStatement"]
    /** The type for the `WithStatement` node. */
    export type WithStatement = AST["WithStatement"]
}

/** The union type for all alias names. */
export type AliasName = ast.AliasName<ES5>

/**
 * The union type for all node type names in TypeScript.
 *
 * This is not the node type of ESTree because it may represent each ESTree node
 * by multiple TypeScript types.
 * Use the `TypeName` type if you want ESTree node type names.
 */
export type NodeName = ast.NodeName<ES5>

/**
 * The union type for all node type names in ESTree.
 *
 * This is not the type name in TypeScript because it may represent each ESTree
 * node by multiple TypeScript types.
 * Use the `NodeName` type if you want node type names in TypeScript.
 */
export type TypeName = ast.ASTType<ES5>

/** The union type for all nodes. */
export type Node = AST["Node"]
/** The union type for the `AssignmentExpression` alias. */
export type AssignmentExpression = AST["AssignmentExpression"]
/** The union type for the `AssignmentTarget` alias. */
export type AssignmentTarget = AST["AssignmentTarget"]
/** The union type for the `BindingTarget` alias. */
export type BindingTarget = AST["BindingTarget"]
/** The union type for the `Declaration` alias. */
export type Declaration = AST["Declaration"]
/** The union type for the `Expression` alias. */
export type Expression = AST["Expression"]
/** The union type for the `Function` alias. */
export type Function = AST["Function"]
/** The union type for the `FunctionDeclaration` alias. */
export type FunctionDeclaration = AST["FunctionDeclaration"]
/** The union type for the `Literal` alias. */
export type Literal = AST["Literal"]
/** The union type for the `LogicalExpression` alias. */
export type LogicalExpression = AST["LogicalExpression"]
/** The union type for the `MemberExpression` alias. */
export type MemberExpression = AST["MemberExpression"]
/** The union type for the `ObjectProperty` alias. */
export type ObjectProperty = AST["ObjectProperty"]
/** The union type for the `Program` alias. */
export type Program = AST["Program"]
/** The union type for the `Property` alias. */
export type Property = AST["Property"]
/** The union type for the `SimpleAssignmentTarget` alias. */
export type SimpleAssignmentTarget = AST["SimpleAssignmentTarget"]
/** The union type for the `Statement` alias. */
export type Statement = AST["Statement"]
/** The union type for the `StaticPropertyKey` alias. */
export type StaticPropertyKey = AST["StaticPropertyKey"]
/** The type for the `AccessorProperty` node. */
export type AccessorProperty = AST["AccessorProperty"]
/** The type for the `ArrayExpression` node. */
export type ArrayExpression = AST["ArrayExpression"]
/** The type for the `BinaryExpression` node. */
export type BinaryExpression = AST["BinaryExpression"]
/** The type for the `BlockStatement` node. */
export type BlockStatement = AST["BlockStatement"]
/** The type for the `BooleanLiteral` node. */
export type BooleanLiteral = AST["BooleanLiteral"]
/** The type for the `BreakStatement` node. */
export type BreakStatement = AST["BreakStatement"]
/** The type for the `CallExpression` node. */
export type CallExpression = AST["CallExpression"]
/** The type for the `CatchClause` node. */
export type CatchClause = AST["CatchClause"]
/** The type for the `CompoundAssignmentExpression` node. */
export type CompoundAssignmentExpression = AST["CompoundAssignmentExpression"]
/** The type for the `ComputedMemberExpression` node. */
export type ComputedMemberExpression = AST["ComputedMemberExpression"]
/** The type for the `ConditionalExpression` node. */
export type ConditionalExpression = AST["ConditionalExpression"]
/** The type for the `ContinueStatement` node. */
export type ContinueStatement = AST["ContinueStatement"]
/** The type for the `DebuggerStatement` node. */
export type DebuggerStatement = AST["DebuggerStatement"]
/** The type for the `DoWhileStatement` node. */
export type DoWhileStatement = AST["DoWhileStatement"]
/** The type for the `EmptyStatement` node. */
export type EmptyStatement = AST["EmptyStatement"]
/** The type for the `ExpressionStatement` node. */
export type ExpressionStatement = AST["ExpressionStatement"]
/** The type for the `ForInStatement` node. */
export type ForInStatement = AST["ForInStatement"]
/** The type for the `ForStatement` node. */
export type ForStatement = AST["ForStatement"]
/** The type for the `FunctionExpression` node. */
export type FunctionExpression = AST["FunctionExpression"]
/** The type for the `Identifier` node. */
export type Identifier = AST["Identifier"]
/** The type for the `IfStatement` node. */
export type IfStatement = AST["IfStatement"]
/** The type for the `LabeledStatement` node. */
export type LabeledStatement = AST["LabeledStatement"]
/** The type for the `NewExpression` node. */
export type NewExpression = AST["NewExpression"]
/** The type for the `NullLiteral` node. */
export type NullLiteral = AST["NullLiteral"]
/** The type for the `NumberLiteral` node. */
export type NumberLiteral = AST["NumberLiteral"]
/** The type for the `ObjectExpression` node. */
export type ObjectExpression = AST["ObjectExpression"]
/** The type for the `PlainAssignmentExpression` node. */
export type PlainAssignmentExpression = AST["PlainAssignmentExpression"]
/** The type for the `PlainFunctionDeclaration` node. */
export type PlainFunctionDeclaration = AST["PlainFunctionDeclaration"]
/** The type for the `PlainLogicalExpression` node. */
export type PlainLogicalExpression = AST["PlainLogicalExpression"]
/** The type for the `PlainMemberExpression` node. */
export type PlainMemberExpression = AST["PlainMemberExpression"]
/** The type for the `PlainProperty` node. */
export type PlainProperty = AST["PlainProperty"]
/** The type for the `RegExpLiteral` node. */
export type RegExpLiteral = AST["RegExpLiteral"]
/** The type for the `ReturnStatement` node. */
export type ReturnStatement = AST["ReturnStatement"]
/** The type for the `ScriptProgram` node. */
export type ScriptProgram = AST["ScriptProgram"]
/** The type for the `SequenceExpression` node. */
export type SequenceExpression = AST["SequenceExpression"]
/** The type for the `StringLiteral` node. */
export type StringLiteral = AST["StringLiteral"]
/** The type for the `SwitchCase` node. */
export type SwitchCase = AST["SwitchCase"]
/** The type for the `SwitchStatement` node. */
export type SwitchStatement = AST["SwitchStatement"]
/** The type for the `ThisExpression` node. */
export type ThisExpression = AST["ThisExpression"]
/** The type for the `ThrowStatement` node. */
export type ThrowStatement = AST["ThrowStatement"]
/** The type for the `TryStatement` node. */
export type TryStatement = AST["TryStatement"]
/** The type for the `UnaryExpression` node. */
export type UnaryExpression = AST["UnaryExpression"]
/** The type for the `UpdateExpression` node. */
export type UpdateExpression = AST["UpdateExpression"]
/** The type for the `VariableDeclaration` node. */
export type VariableDeclaration = AST["VariableDeclaration"]
/** The type for the `VariableDeclarator` node. */
export type VariableDeclarator = AST["VariableDeclarator"]
/** The type for the `WhileStatement` node. */
export type WhileStatement = AST["WhileStatement"]
/** The type for the `WithStatement` node. */
export type WithStatement = AST["WithStatement"]
